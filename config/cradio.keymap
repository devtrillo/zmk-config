// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/mouse_key_press.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <250>;
};

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        PS: PS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N5 &kp N0 &kp N1 &kp N2 &kp N5 &kp LS(E) &kp S &kp T &kp E &kp B &kp A &kp N &kp AT>;
            label = "PS";
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&lt 2 TAB>;
            key-positions = <30 31>;
        };

        delete {
            bindings = <&lt 2 DELETE>;
            key-positions = <32 33>;
        };

        dot {
            bindings = <&kp DOT>;
            key-positions = <32 33>;
            layers = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp Q           &kp W       &kp E        &kp R                         &kp T      &kp Y            &kp U                              &kp I        &kp O       &kp P
&mt LEFT_GUI A  &mt LALT S  &mt LCTRL D  &mt LSHIFT F                  &kp G      &kp H            &mt RSHFT J                        &mt RCTRL K  &mt RALT L  &mt RGUI SEMI
&kp Z           &kp X       &kp C        &kp V                         &kp B      &kp N            &kp M                              &kp COMMA    &kp DOT     &kp FSLH
                                         &mt LC(LA(LEFT_SHIFT)) SPACE  &lt 0 TAB  &lt 0 BACKSPACE  &mt RA(RC(RG(RIGHT_SHIFT))) ENTER
            >;
        };

        Colemak-DH {
            bindings = <
&kp Q           &kp W           &kp F        &kp P         &kp B   &kp J   &kp L        &kp U        &kp Y       &kp SEMI
&mt LEFT_GUI A  &mt LALT R      &mt LCTRL S  &mt LSHIFT T  &kp G   &kp K   &mt RSHFT N  &mt RCTRL E  &mt RALT I  &mt RGUI O
&kp Z           &mt LEFT_ALT X  &kp C        &kp D         &kp V   &kp M   &kp H        &kp COMMA    &kp DOT     &kp FSLH
                                             &trans        &trans  &trans  &trans
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };

        Num {
            bindings = <
&trans    &trans    &trans     &trans     &trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp SEMI
&none     &kp RALT  &none      &trans     &trans  &kp BSLH   &kp N1  &kp N2  &kp N3  &kp GRAVE
                               &trans     &none   &kp MINUS  &kp N0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
